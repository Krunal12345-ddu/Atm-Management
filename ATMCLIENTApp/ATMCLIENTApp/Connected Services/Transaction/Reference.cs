//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ATMCLIENTApp.Transaction {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Transaction.ITransaction")]
    public interface ITransaction {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/withdrawamount", ReplyAction="http://tempuri.org/ITransaction/withdrawamountResponse")]
        void withdrawamount(int Acc, string wdAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/withdrawamount", ReplyAction="http://tempuri.org/ITransaction/withdrawamountResponse")]
        System.Threading.Tasks.Task withdrawamountAsync(int Acc, string wdAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/depositamount", ReplyAction="http://tempuri.org/ITransaction/depositamountResponse")]
        void depositamount(int Acc, string dpAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/depositamount", ReplyAction="http://tempuri.org/ITransaction/depositamountResponse")]
        System.Threading.Tasks.Task depositamountAsync(int Acc, string dpAmt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/GetMiniStatement", ReplyAction="http://tempuri.org/ITransaction/GetMiniStatementResponse")]
        System.Data.DataSet GetMiniStatement(int accNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/GetMiniStatement", ReplyAction="http://tempuri.org/ITransaction/GetMiniStatementResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMiniStatementAsync(int accNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/Fastcash", ReplyAction="http://tempuri.org/ITransaction/FastcashResponse")]
        void Fastcash(int Acc, int currency_val, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransaction/Fastcash", ReplyAction="http://tempuri.org/ITransaction/FastcashResponse")]
        System.Threading.Tasks.Task FastcashAsync(int Acc, int currency_val, int quantity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionChannel : ATMCLIENTApp.Transaction.ITransaction, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionClient : System.ServiceModel.ClientBase<ATMCLIENTApp.Transaction.ITransaction>, ATMCLIENTApp.Transaction.ITransaction {
        
        public TransactionClient() {
        }
        
        public TransactionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void withdrawamount(int Acc, string wdAmt) {
            base.Channel.withdrawamount(Acc, wdAmt);
        }
        
        public System.Threading.Tasks.Task withdrawamountAsync(int Acc, string wdAmt) {
            return base.Channel.withdrawamountAsync(Acc, wdAmt);
        }
        
        public void depositamount(int Acc, string dpAmt) {
            base.Channel.depositamount(Acc, dpAmt);
        }
        
        public System.Threading.Tasks.Task depositamountAsync(int Acc, string dpAmt) {
            return base.Channel.depositamountAsync(Acc, dpAmt);
        }
        
        public System.Data.DataSet GetMiniStatement(int accNum) {
            return base.Channel.GetMiniStatement(accNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMiniStatementAsync(int accNum) {
            return base.Channel.GetMiniStatementAsync(accNum);
        }
        
        public void Fastcash(int Acc, int currency_val, int quantity) {
            base.Channel.Fastcash(Acc, currency_val, quantity);
        }
        
        public System.Threading.Tasks.Task FastcashAsync(int Acc, int currency_val, int quantity) {
            return base.Channel.FastcashAsync(Acc, currency_val, quantity);
        }
    }
}
